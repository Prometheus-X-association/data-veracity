---
openapi: 3.0.3
info:
  title: Data Veracity Assurance
  description: |-
    This is the API specification of the
    [data veracity assurance building block (DVA)](https://github.com/Prometheus-X-association/data-veracity).
  contact:
    email: bpeter@edu.bme.hu
  version: 0.3.0
servers:
  - url: http://localhost:9090
    description: Local development server running on default port
  - url: '{server}'
    description: Custom parameterizable server
    variables:
      server:
        default: http://example.com:1234
        description: Custom server URL
tags:
  - name: VLA
    description: Endpoints related to veracity level agreements (VLAs)
  - name: AoV
    description: Endpoints related to attestations of veracity (AoVs)
  - name: PoV
    description: Endpoints related to proofs of veracity (PoVs)
  - name: Info
    description: Endpoints related to retrieving information about the running instance
paths:
  /template:
    post:
      tags: [VLA]
      summary: Create new VLA template
      description: >
        Add a new **VLA template** to the database.
        You need to specify the ID of the template yourself.
        A `201 CREATED` response is given if the template has been successfully created.
        Otherwise, you will get a `400 BAD REQUEST` (in case of invalid request data).
      operationId: createTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreate'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/InvalidData'
    get:
      tags: [VLA]
      summary: Get all VLA templates
      description: >
        Returns all available **VLA templates** from the database as an array.
      operationId: getTemplates
      responses:
        '200':
          description: The list of available VLA templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateArray'
  /template/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: A VLA template’s ID
    get:
      tags: [VLA]
      summary: Get VLA template by ID
      description: >
        Queries a specific **VLA template** by its unique ID.
        Responds either with `200 OK` and the contents of the requested template or
        with `404 NOT FOUND` if no VLA template with the specified ID exists.
      operationId: getTemplate
      responses:
        '200':
          description: Returning requested VLA template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [VLA]
      summary: Update VLA template
      description: >
        Used to update an existing **VLA template** specified by its ID.
        The request body should contain a partial VLA template object – only specified
        fields will be updated, if possible.
        Responds with `200 OK` if the update operation was successful or `404 NOT
        FOUND` if no VLA template with the specified ID exists.
      operationId: updateTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdate'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [VLA]
      summary: Delete VLA template
      description: >
        Delete a **VLA template** specified by its ID.
        Responds `200 OK` if the template was successfully deleted or `404  FOUND`
        if no template with the specified ID exists.
      operationId: deleteTemplate
      responses:
        '200':
          $ref: '#/components/responses/Deleted'
        '404':
          $ref: '#/components/responses/NotFound'
  /vla:
    post:
      tags: [VLA]
      summary: Create a new VLA
      description: >
        Create a new **Veracity Level Agreement (VLA).**
        Responds `201 CREATED` if the VLA was successfully created or `400 BAD REQUEST`
        if creation failed.
      operationId: createVLA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VLACreate'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/InvalidData'
    get:
      tags: [VLA]
      summary: Get all VLAs
      description: >
        Returns all available **Veracity Level Agreements** from the database as an
        array.
      operationId: getVLAs
      responses:
        '200':
          description: The list of known VLAs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VLAArray'
  /vla/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: A VLA’s ID
    get:
      tags: [VLA]
      summary: Get VLA by ID
      description: >
        Queries a specific **Veracity Level Agreement** by its unique ID.
        Responds either with `200 OK` and the contents of the requested VLA or with
        `404 NOT FOUND` if no VLA with the specified ID exists.
      operationId: getVLA
      responses:
        '200':
          description: Returning requested VLA
          content:
            application/json:
              schema:
                $ref: https://raw.githubusercontent.com/bitol-io/open-data-contract-standard/refs/heads/main/schema/odcs-json-schema-latest.json
        '404':
          $ref: '#/components/responses/NotFound'
  /attestation:
    post:
      tags: [AoV]
      summary: Submit an attestation request
      description: >
        Create a new **AoV request** for a given data exchange.
        Requests are processed asynchronously.
        If your request has been accepted for processing, the response will be `202
        ACCEPTED`.
        Otherwise, in the case of an invalid request, you will get a `404 BAD REQUEST`
        error.
      operationId: requestAov
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttestationRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/InvalidData'
  /attestation/verify:
    post:
      tags: [AoV]
      summary: Submit an AoV verification request
      description: >
        Create a new **AoV verification request** for a given AoV.
        Requests are processed asynchronously.
        If your request has been accepted for processing, the response will be `202
        ACCEPTED`.
        Otherwise, in the case of an invalid request, you will get a `404 BAD REQUEST`
        error.
      operationId: requestAovVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/InvalidData'
  /proof:
    post:
      tags: [PoV]
      summary: Submit proof generation request
      description: >
        Create a new **PoV request** for a given data exchange.
        Requests are processed asynchronously.
        If your request has been accepted for processing, the response will be `202
        ACCEPTED`.
        Otherwise, in the case of an invalid request, you will get a `404 BAD REQUEST`
        error.
      operationId: requestPov
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProofRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/InvalidData'
  /proof/verify:
    post:
      tags: [PoV]
      summary: Submit PoV verification request
      description: >
        Create a new **PoV verification request** for a given PoV.
        Requests are processed asynchronously.
        If your request has been accepted for processing, the response will be `202
        ACCEPTED`.
        Otherwise, in the case of an invalid request, you will get a `404 BAD REQUEST`
        error.
      operationId: requestPovVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/InvalidData'
  /info/requests:
    get:
      tags: [Info]
      summary: Get all DVA attestation/proof requests
      operationId: getRequests
      responses:
        '200':
          description: Returning all known requests
          content:
            application/json:
              schema:
                type: object
  /info/presentations:
    get:
      tags: [Info]
      summary: Get all DVA presentations/verifications
      operationId: getPresentations
      responses:
        '200':
          description: Returning all known presentations
          content:
            application/json:
              schema:
                type: object
  /info/credentials:
    get:
      tags: [Info]
      summary: Get all stored verifiable credentials
      operationId: getCredentials
      responses:
        '200':
          description: Returning all stored VCs
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    Id:
      type: string
      example: 8e51e3a7-c614-4f5f-9ecf-8e2b032d72e4
    IdObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required: [id]
      example:
        id: 8d70bc5f-f690-4b66-a7b0-c05c8c815dad
    TemplateArray:
      type: array
      items:
        $ref: '#/components/schemas/Template'
    Template:
      type: object
      required:
        - id
        - name
        - criterionType
        - targetAspect
        - evaluatoinMethod
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        criterionType:
          $ref: '#/components/schemas/CriterionType'
        targetAspect:
          $ref: '#/components/schemas/QualityAspect'
        evaluationMethod:
          type: object
          required: [engine, variableSchema, implementationTemplate]
          additionalProperties: false
          properties:
            engine:
              type: string
            variableSchema:
              type: object
            implementationTemplate:
              type: string
      example:
        id: json-schema-check
        name: JSON Schema
        description: >-
          Data should conform to a JSON schema with the given URL
        criterionType: validInvalid
        targetAspect: syntax
        evaluationMethod:
          engine: schema
          variableSchema:
            schemaURL:
              type: string
          implementationTemplate: '{{ schemaURL }}'
    TemplateCreate:
      allOf:
        - $ref: '#/components/schemas/Template'
    TemplateUpdate:
      allOf:
        - $ref: '#/components/schemas/Template'
    VLACreate:
      allOf:
        - $ref: https://raw.githubusercontent.com/bitol-io/open-data-contract-standard/refs/heads/main/schema/odcs-json-schema-latest.json
    VLAArray:
      type: array
      items:
        $ref: https://raw.githubusercontent.com/bitol-io/open-data-contract-standard/refs/heads/main/schema/odcs-json-schema-latest.json
    CriterionType:
      type: string
      enum: [validInvalid, withinRange, greaterOrLessThan]
    QualityAspect:
      type: string
      enum: [syntax, timeliness, accuracy, completeness, consistency]
    VeracityRequest:
      type: object
      required: [exchangeID, contract, data]
      properties:
        exchangeID:
          type: string
          example: 75c411c0-4016-4f83-a3e8-66b137080d86
        contract:
          type: object
          required: [id, vla]
          additionalProperties: true
          properties:
            id:
              type: string
            vla:
              $ref: https://raw.githubusercontent.com/bitol-io/open-data-contract-standard/refs/heads/main/schema/odcs-json-schema-latest.json
        data:
          $ref: '#/components/schemas/AnyValue'
      example:
        exchangeID: xchg-0001
        contract:
          id: contract-0001
          dataProvider: /catalog/participants/provider-test-id
          dataConsumer: /catalog/participants/consumer-test-did
          serviceOffering: /catalog/serviceofferings/serviceoffering-test-did
          purpose: []
          negotiators:
            - did: /catalog/participants/provider-test-id
            - did: /catalog/participants/consumer-test-did
          status: PENDING
          policy:
            - uid: /policy/policy-0-uid
              permission:
                - type: permission
                  uid: /target/3f8d1b0e-8e2e-4b69-9b1f-089fe2f3e9d7
                  action: use
          vla:
            id: 2e99b60d-8cf7-4668-a234-96ebfd6a2b63
            kind: DataContract
            schema:
              name: xapi_statement
              logicalType: object
              properties:
                - name: actor
                  logicalType: object
                  required: true
                - name: verb
                  logicalType: object
                  required: true
                - name: object
                  logicalType: object
                  required: true
                - name: result
                  logicalType: object
                  required: true
                - name: timestamp
                  logicalType: string
                  required: true
              quality:
                - type: custom
                  engine: greatExpectations
                  implementation: >-
                    type: ExpectColumnValuesToBeBetween
                    kwargs:
                      column: timestamp
                      min_value: '2025-01-01T00:00:00Z'
                      max_value: '2026-01-01T00:00:00Z'
        data:
          actor:
            name: Jean Dupont
            mbox: mailto:jeandupont@example.com
          verb:
            id: http://adlnet.gov/expapi/verbs/interacted
          object:
            id: https://navy.mil/netc/xapi/activities/simulations/b9e16535-4fc9-4c66-ac87-3ad7ce515f5c/events/0221144
            definition:
              name:
                en-US: Event in Simulator
              description:
                en-US: You're wearing all your PPE
              type: http://adlnet.gov/expapi/activities/interaction
          result:
            success: true
          timestamp: '2025-03-16T03:25:00Z'
    AttestationRequest:
      allOf:
        - $ref: '#/components/schemas/VeracityRequest'
      required: [attesterID]
      properties:
        attesterID:
          type: string
    ProofRequest:
      allOf:
        - $ref: '#/components/schemas/VeracityRequest'
      required: [proverID]
      properties:
        proverID:
          type: string
    VerificationRequest:
      type: object
      required:
        - exchangeID
        - contractID
        - attesterAgentURL
        - attesterAgentLabel
      additionalProperties: false
      properties:
        exchangeID:
          type: string
        contractID:
          type: string
        attesterAgentURL:
          type: string
          format: url
        attesterAgentLabel:
          type: string
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
    AnyValue: {}
  responses:
    Created:
      description: The resource has been created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdObject'
    Updated:
      description: The resource has been updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdObject'
    Deleted:
      description: The resource has been deleted successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdObject'
    Accepted:
      description: The request has been accepted for processing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdObject'
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Template:
              value:
                type: NOT_FOUND
                message: Could not find VLA template with id 'foo-123'
            AoV:
              value:
                type: NOT_FOUND
                message: Could not find AoV with id 'bar-123'
    InvalidData:
      description: The request body was invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Template:
              value:
                type: INVALID_DATA
                message: Invalid template data supplied
            AoV:
              value:
                type: INVALID_DATA
                message: Invalid AoV data supplied
